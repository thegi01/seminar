'use strict';
window.onload = function(){ 

var result = 'ABC'.match(/(A)/);
js.log(result); // [A, A]
/*
1. ()안의 A로 매치합니다.
2. 매치가 되면 매치된 값을 캡처합니다.
	- 캡처된 값을 반환할 배열의 두 번째 엘리먼트에 설정합니다.
3. 캡처된 값으로 매치합니다.
	- 매치가 되며 반환할 배열의 첫 번째에 설정합니다.
*/

result = 'ABC'.match(/((A))/);
js.log(result); // [A, A, A]
/*
1. ()를 두 개 작성한 패턴입니다.
	- A가 매치되면 3개의 엘리먼트가 반환됩니다.
2. ((A))에서 A로 매치합니다.
	- 매치된 A를 캡처하고 반환할 3번째 엘리먼트에 설정합니다.
	- ((A))는 (A)가 됩니다.
3. (A)에서 A가 매치되므로
	- A를 캡처하고 2번째 엘리먼트에 설정합니다.
	- /A/가 남게 됩니다.
4. 남아 있는 A가 매치되며 첫 번째 엘리먼트에 설정합니다.
5. 이런 과정을 통해 [A, A, A]가 반환됩니다.
*/

result = 'ABCDEF'.match(/AB(C|P)(D|Q)EF/);
js.log(result); // [ABCDEF,C,D]
/*
1. (C|P)와 (D|Q)가 매치되면 3개의 엘리먼트가 반환됩니다.
2. (C|P)로 매치하면 C가 매치됩니다.
	- 매치된 C가 캡처되고 반환할 배열의 2번째에 설정합니다.
3. (D|Q)로 매치하면 D가 매치됩니다.
	- 매치된 D가 캡쳐되고 반환할 배열의 3번째에 설정합니다.
4. 소괄호 밖의 문자와 캡처한 값을 연결하면 ABCDEF가 됩니다.
*/

/*
**()를 먼저 매치하는데 매치된 값이 반환할 배열의 처음에 설정되지 않는 이유를 계속해서 살펴 봅니다.
*/





}