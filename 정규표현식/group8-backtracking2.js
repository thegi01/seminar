'use strict';
window.onload = function(){ 

// 욕심 없는 패턴의 백트레킹

var result = 'swim'.match(/s.*?/);
js.log(result); // [s]
/*
1. 욕심 없는 패턴 문자는 되도록 적게 매치하려는 특성으로 인해
	- s 만 매치하게 됩니다.
*/

var result = 'swim'.match(/s.*?m/);
js.log(result); //[swim]
/*
1. m까지 매치되어야 전체가 성공
2. 패턴을 매치 대상에 매치하면 첫 번째 s가 매치되므로
	- 클로저에 s가 설정되고 lastIndex는 w를 가리키게 됩니다.
3. ".*?"에서 "*?"는 되도록 매치하지 않으려는 특성으로 인해
	- 일단 다음 패턴으로 넘어갑니다.
	- 여기까지가 바로 앞 표현식의 매치 과정입니다.
4. 한편, 다음에 m이 있으며 m이 매치되어야 전체가 매치되므로
	- 정규 표현식의 최적화가 발동하게 되며
	- 이 때 백트레킹을 사용하게 됩니다.
5. 매치된 s와 m을 연결하며 매치합니다.
6. 매치가 되지 않으므로 패턴으로 돌아와 ".*?"로 매치합니다.
	- swim의 w가 매치되며 클로저에 설정합니다.
7. 다시 클로저에 설정된 문자열(sw)와 m을 연결하여 매치합니다.
8. 그래도 매치가 되지 않으므로 패턴으로 돌아와 ".*?"로 매치합니다.
	- swim의 i가 매치되며 클로저에 설정합니다.
9. 다시 클로저에 설정된 문자열 swi와 m을 연결하여 매치합니다.
*/


}


